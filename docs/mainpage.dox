/**
 * @mainpage gocxx - Go-like Concurrency Primitives for C++
 * 
 * @section intro_sec Introduction
 * 
 * gocxx is a C++20 library that provides Go-like concurrency primitives and utilities,
 * bringing the elegance and simplicity of Go's concurrency model to C++.
 * 
 * @section features_sec Key Features
 * 
 * - **Channels**: Type-safe, thread-safe communication channels inspired by Go
 * - **Select**: Non-blocking channel operations with multiple channel selection
 * - **Defer**: RAII-based cleanup mechanism similar to Go's defer
 * - **Result Types**: Error handling without exceptions
 * - **Synchronization**: Go-like sync primitives (WaitGroup, Mutex, etc.)
 * - **Time Utilities**: Duration and time handling similar to Go
 * - **I/O Operations**: Go-like I/O interfaces and utilities
 * - **OS Integration**: Cross-platform OS utilities
 * 
 * @section modules_sec Library Modules
 * 
 * ### Base Module (gocxx::base)
 * Core primitives including channels, select, defer, and result types.
 * 
 * ### Synchronization Module (gocxx::sync)
 * Thread synchronization primitives like WaitGroup and Mutex.
 * 
 * ### Time Module (gocxx::time)
 * Time and duration handling utilities.
 * 
 * ### I/O Module (gocxx::io)
 * Input/output interfaces and utilities.
 * 
 * ### OS Module (gocxx::os)
 * Operating system integration utilities.
 * 
 * ### Error Module (gocxx::errors)
 * Error handling and error creation utilities.
 * 
 * @section quick_start Quick Start
 * 
 * @subsection installation Installation
 * 
 * ```bash
 * # Clone the repository
 * git clone <repository-url>
 * cd gocxx
 * 
 * # Build with CMake
 * mkdir build && cd build
 * cmake ..
 * make
 * 
 * # Install
 * make install
 * ```
 * 
 * @subsection basic_usage Basic Usage
 * 
 * ```cpp
 * #include <gocxx/gocxx.h>
 * 
 * using namespace gocxx::base;
 * using namespace gocxx::time;
 * 
 * int main() {
 *     // Create a channel
 *     Chan<int> ch;
 *     
 *     // Start a producer thread
 *     std::thread producer([&ch]() {
 *         for (int i = 0; i < 10; ++i) {
 *             ch << i;  // Send to channel
 *         }
 *         ch.close();
 *     });
 *     
 *     // Consume from channel
 *     int value;
 *     while (ch >> value) {  // Receive from channel
 *         std::cout << "Received: " << value << std::endl;
 *     }
 *     
 *     producer.join();
 *     return 0;
 * }
 * ```
 * 
 * @section examples_sec Examples
 * 
 * See the `examples/` directory for more comprehensive examples including:
 * - Channel communication patterns
 * - Select operations
 * - Synchronization primitives
 * - Error handling patterns
 * 
 * @section requirements_sec Requirements
 * 
 * - C++20 compatible compiler (GCC 10+, Clang 11+, MSVC 2022+)
 * - CMake 3.15 or later
 * - Optional: Doxygen for documentation generation
 * - Optional: Google Test for running tests
 * 
 * @section license_sec License
 * 
 * This project is licensed under the terms specified in the LICENSE file.
 * 
 * @section contributing_sec Contributing
 * 
 * Please read CONTRIBUTING.md for details on our code of conduct and the process
 * for submitting pull requests.
 */
